{
	"Constructor": {
		"prefix": "const",
		"body": [
			"/**",
			" * Create a new instance of this class.",
			" *",
			" * @param  $1",
			" * @return void",
			" */",
			"public function __construct($1)",
			"{",
			"    $2",
			"}",
			""
		],
		"description": "Constructor"
	},
	"laravel-accessor": {
		"prefix": "accessor",
		"body": [
			"/**",
			" * Create a \"$1\" attribute.",
			" *",
			" * @return $2",
			" */",
			"public function get$3Attribute()",
			"{",
			"    return $4",
			"}",
			""
		],
		"description": "Laravel accessor"
	},
	"laravel-gate": {
		"prefix": "gate",
		"body": [
			"Gate::define('$1', function (\\$user) {",
			"    return in_array(\\$user->username, [$2]);",
			"});"
		],
		"description": "Laravel Gate"
	},
	"laravel-mutator": {
		"prefix": "mutator",
		"body": [
			"/**",
			" * Set the \"$1\" attribute.",
			" *",
			" * @return void",
			" */",
			"public function set$2Attribute($value)",
			"{",
			"    \\$this->attributes['$1'] = $3",
			"}",
			""
		],
		"description": "Laravel mutator"
	},
	"laravel-scope-query": {
		"prefix": "scope",
		"body": [
			"/**",
			" * Filter only the items that $1",
			" *",
			" * @param  \\Illuminate\\Database\\Eloquent\\Builder \\$query",
			" * @return \\Illuminate\\Database\\Eloquent\\Builder",
			" */",
			"public function scope$2(\\$query)",
			"{",
			"    return \\$query->where($3);",
			"}",
			""
		],
		"description": "Laravel scope query"
	},
	"php-protected-method": {
		"prefix": "pmet",
		"body": [
			"/**",
			" * $2",
			" *",
			" * @param  $4",
			" * @return $3",
			" */",
			"protected function $1($5)",
			"{",
			"    $6",
			"}",
			""
		],
		"description": "PHP protected method"
	},
	"PHP Protected Member Variable": {
		"prefix": "pvar",
		"body": [
			"/**",
			" * $3",
			" *",
			" * @var $1",
			" */",
			"protected $2;",
			""
		],
		"description": "PHP private member variable"
	},
	"laravel-belongsTo-relationship": {
		"prefix": "belongsto",
		"body": [
			"/**",
			" * A $1 belongs to a $2.",
			" */",
			"public function $3()",
			"{",
			"    return \\$this->belongsTo(\\App\\Models\\\\$4::class);",
			"}",
			""
		],
		"description": "Laravel \"hasOne\" Relationship"
	},
	"laravel-hasMany-relationship": {
		"prefix": "hasmany",
		"body": [
			"/**",
			" * A $1 has many $2.",
			" */",
			"public function $3()",
			"{",
			"    return \\$this->hasMany(\\App\\Models\\\\$4::class);",
			"}",
			""
		],
		"description": "Laravel \"hasMany\" Relationship"
	},
	"laravel-hasOne-relationship": {
		"prefix": "hasone",
		"body": [
			"/**",
			" * A $1 has one $2.",
			" */",
			"public function $3()",
			"{",
			"    return \\$this->hasOne(\\App\\Models\\\\$4::class);",
			"}",
			""
		],
		"description": "Laravel \"hasOne\" Relationship"
	},
	"phpunit-test": {
		"prefix": "test",
		"body": [
			"/** @test */",
			"public function it_$1()",
			"{",
			"    $2",
			"}",
			""
		],
		"description": "PHPUnit Test"
	},
	"docblock": {
		"prefix": "docblock",
		"body": [
			"/**",
			" * $1",
			" *",
			" * @param  $3",
			" * @return $2",
			" */"
		],
		"description": "DocBlock"
	},
	"laravel-model": {
		"prefix": "model",
		"body": [
			"    /**",
			"     * The custom name for the \"created_at\" column.",
			"     *",
			"     * @var string",
			"     */",
			"    const CREATED_AT = 'date_created';",
			"",
			"    /**",
			"     * The custom name for the \"updated_at\" column.",
			"     *",
			"     * @var string",
			"     */",
			"    const UPDATED_AT = 'last_updated';",
			"",
			"    /**",
			"     * The attributes that are not mass assignable.",
			"     *",
			"     * @var array",
			"     */",
			"    protected \\$guarded = ['id', 'date_created', 'last_updated'];",
			"",
			"    /**",
			"     * The attributes that should be mutated to dates.",
			"     *",
			"     * @var array",
			"     */",
			"    protected \\$dates = ['date_created', 'last_updated'];",
			"",
			"    /**",
			"     * The attributes that should be cast to native types.",
			"     *",
			"     * @var array",
			"     */",
			"    protected \\$casts = [",
			"        'id' => 'integer',",
			"    ];",
			""
		],
		"description": "Typical configuration for a Laravel model"
	},
	"laravel-foreign-key": {
		"prefix": "fk",
		"body": [
			"\\$table->foreign('$1')->references('id')->on('$2')->onDelete('cascade')->onUpdate('cascade');"
		],
		"description": "Foreign key constraint"
	},
	"laravel-model-casts": {
		"prefix": "casts",
		"body": [
			"/**",
			" * Model Casts",
			" */",
			"protected \\$casts = [",
			"    $1",
			"];",
			""
		],
		"description": "Laravel model $casts array"
	},
	"laravel-model-cache-key": {
		"prefix": "cachekey",
		"body": [
			"/**",
			" * Gerneate a custom cache key for this model.",
			" *",
			" * @return string",
			" */",
			"public function cacheKey()",
			"{",
			"    return sprintf('%s:%s:%s', \\$this->getTable(), \\$this->getKey(), \\$this->updated_at->timestamp);",
			"}"
		],
		"description": "Laravel Model Cache Key"
	},
	"laravel-feature-test": {
		"prefix": "testclass",
		"body": [
			"",
			"namespace Tests\\Feature;",
			"",
			"use Illuminate\\Foundation\\Testing\\RefreshDatabase;",
			"use Tests\\TestCase;",
			"",
			"class $1Test extends TestCase",
			"{",
			"    use RefreshDatabase;",
			"",
			"    /**",
			"     * Setup the testing environment.",
			"     *",
			"     * @return void",
			"     */",
			"    public function setUp()",
			"    {",
			"        parent::setUp();",
			"    }",
			"",
			"    /*",
			"    |--------------------------------------------------------------------------",
			"    | Resource:Index",
			"    |--------------------------------------------------------------------------",
			"    */",
			"",
			"    /** @test */",
			"    public function it_shows_the_resource_index_to_authenticated_users()",
			"    {",
			"        // arrange",
			"        \\$user = factory(\\App\\Models\\User::class)->create();",
			"",
			"        // act & assert",
			"        \\$response = \\$this->actingAs(\\$user)->get(route('resource.index'));",
			"        \\$response->assertStatus(200);",
			"    }",
			"",
			"    /*",
			"    |--------------------------------------------------------------------------",
			"    | Guests",
			"    |--------------------------------------------------------------------------",
			"    */",
			"",
			"    /** @test */",
			"    public function it_redirects_guests_to_the_login_page()",
			"    {",
			"        \\$response = \\$this->get(route('resource.index'));",
			"        \\$response->assertRedirect(route('login'));",
			"    }",
			"}",
			""
		],
		"description": "Laravel feature test"
	},
	"laravel-index-method": {
		"prefix": "index",
		"body": [
			"    /**",
			"     * Display a listing of the resource.",
			"     *",
			"     * @return \\Illuminate\\Http\\Response",
			"     */",
			"    public function index()",
			"    {",
			"        //",
			"    }",
			""
		],
		"description": "index() method for a Laravel controller"
	},
	"laravel-eloquent-dates-array": {
		"prefix": "dates",
		"body": [
			"protected \\$dates = ['date_created', 'last_updated'];"
		],
		"description": "Laravel Eloquent dates array"
	},
	"Laravel Factory State": {
		"prefix": "factorystate",
		"body": [
			"\\$factory->state(App\\Models\\ $1::class, '$2', function (\\$faker) {",
			"    return [",
			"        $3",
			"    ];",
			"});",
			""
		],
		"description": "Laravel Factory State"
	},
	"undefined": {
		"body": [
			"    /**",
			"     * The custom name for the \"created_at\" column.",
			"     *",
			"     * @var string",
			"     */",
			"    const CREATED_AT = 'date_created';",
			"",
			"    /**",
			"     * The custom name for the \"updated_at\" column.",
			"     *",
			"     * @var string",
			"     */",
			"    const UPDATED_AT = 'last_updated';",
			"",
			"    /**",
			"     * The table associated with the model.",
			"     *",
			"     * @var string",
			"     */",
			"    protected $table = 'tech_radar_categories';",
			"",
			"    /**",
			"     * The attributes that are not mass assignable.",
			"     *",
			"     * @var array",
			"     */",
			"    protected $guarded = ['id', 'date_created', 'last_updated'];",
			"",
			"    /**",
			"     * The attributes that should be mutated to dates.",
			"     *",
			"     * @var array",
			"     */",
			"    protected $dates = ['date_created', 'last_updated'];",
			"",
			"    /**",
			"     * The attributes that should be cast to native types.",
			"     *",
			"     * @var array",
			"     */",
			"    protected $casts = [",
			"        'id' => 'integer',",
			"        'display_order' => 'integer',",
			"    ];"
		]
	}
}