{
  "Constructor": {
    "prefix": "const",
    "body": [
      "public function __construct($1)",
      "{",
      "    $2",
      "}",
      ""
    ],
    "description": "Constructor"
  },
  "Laravel Date Casting": {
    "prefix": "dates",
    "body": [
      "'date_created' => 'datetime',",
      "'last_updated' => 'datetime',"
    ],
    "description": "Standard date casts"
  },
  "Laravel Gate": {
    "prefix": "gate",
    "body": [
      "Gate::define('$1', function (\\$user) {",
      "    return in_array(\\$user->username, [$2]);",
      "});"
    ],
    "description": "Laravel Gate"
  },
  "Laravel BelongsTo Relationship": {
    "prefix": "belongsto",
    "body": [
      "public function $1()",
      "{",
      "    return \\$this->belongsTo($2::class);",
      "}",
      ""
    ],
    "description": "Laravel \"hasOne\" Relationship"
  },
  "Laravel BelongsToMany Relationship": {
    "prefix": "belongstomany",
    "body": [
      "public function $1()",
      "{",
      "    return \\$this->belongsToMany($2::class);",
      "}",
      ""
    ],
    "description": "Laravel \"hasOne\" Relationship"
  },
  "Laravel HasMany Relationship": {
    "prefix": "hasmany",
    "body": [
      "public function $1()",
      "{",
      "    return \\$this->hasMany($2::class);",
      "}",
      ""
    ],
    "description": "Laravel \"hasMany\" Relationship"
  },
  "Laravel HasOne Relationship": {
    "prefix": "hasone",
    "body": [
      "public function $1()",
      "{",
      "    return \\$this->hasOne($2::class);",
      "}",
      ""
    ],
    "description": "Laravel \"hasOne\" Relationship"
  },
  "Laravel Scope Query": {
    "prefix": "scope",
    "body": [
      "public function scope$2(Builder \\$query): Builder",
      "{",
      "    return \\$query->where($3);",
      "}",
      ""
    ],
    "description": "Laravel scope query"
  },
  "Laravel Foreign Key": {
    "prefix": "fk",
    "body": [
      "\\$tbl->foreignId('$1')",
      "    ->constrained()",
      "    ->cascadeOnUpdate()",
      "    ->nullOnDelete();",
      "    ->cascadeOnDelete();"
    ],
    "description": "Foreign key constraint"
  },
  "Laravel Model Casts": {
    "prefix": "casts",
    "body": [
      "protected \\$casts = [",
      "    'id' => 'integer',"
      "    $1",
      "    'date_created' => 'datetime',"
      "    'last_updated' => 'datetime',"
      "];",
      ""
    ],
    "description": "Laravel model $casts array"
  },
  "Laravel Model Cache Key": {
    "prefix": "cachekey",
    "body": [
      "public function cacheKey()",
      "{",
      "    return sprintf('%s:%s:%s', \\$this->getTable(), \\$this->getKey(), \\$this->updated_at->timestamp);",
      "}"
    ],
    "description": "Laravel Model Cache Key"
  },
  "Laravel Index Method": {
    "prefix": "index",
    "body": [
      "public function index()",
      "{",
      "    $1",
      "}",
      ""
    ],
    "description": "index() method for a Laravel controller"
  },
  "Laravel Eloquent guarded attribute": {
    "prefix": "guarded",
    "body": [
      "protected \\$guarded = ['id', 'date_created', 'last_updated'];",
      ""
    ],
    "description": "Eloquent guarded attribute"
  },
  "Laravel Timestamp Replacements": {
    "prefix": "timestamps",
    "body": [
      "\\$tbl->timestamp('date_created')",
      "    ->default(DB::raw('CURRENT_TIMESTAMP'));",
      "",
      "\\$tbl->timestamp('last_updated')",
      "    ->default(DB::raw('CURRENT_TIMESTAMP'));"
    ],
    "description": "Replaces Laravel default timestamp fields with my preferred columns."
  },
  "Laravel Model Factory configure() method": {
    "prefix": "configure",
    "body": [
      "public function configure()",
      "{",
      "    return $this->afterMaking(function ($1) {",
      "        //",
      "    })->afterCreating(function ($1) {",
      "        //",
      "    });",
      "}",
      ""
    ],
    "description": "Laravel Model Factory configure() method"
  },
  "Laravel Scope Query ofUser": {
    "prefix": "scopeOfUser",
    "body": [
      "public function scopeOfUser(Builder \\$query, \\$user): Builder",
      "{",
      "    if (\\$user instanceof User) {",
      "        return \\$query->where('user_id', \\$user->id);",
      "    }",
      "",
      "    if (is_int(\\$user)) {",
      "        return \\$query->where('user_id', \\$user);",
      "    }",
      "",
      "    return \\$query;",
      "}",
      ""
    ],
    "description": "Create a Laravel scope query for items that belong to the provided User"
  },
  "Laravel View Model": {
    "prefix": "vm",
    "body": [
      "\\$viewModel = new $1();",
      "",
      "if (request()->has('vm')) {",
      "    return \\$viewModel;",
      "}",
      "",
      "return inertia('$2', \\$viewModel);"
    ],
    "description": "Instantiate a ViewModel and return it within a view."
  },
  "Laravel Factory State": {
    "prefix": "state",
    "body": [
      "public function $2(): Factory",
      "{",
      "    return \\$this->state(function (array \\$attributes) {",
      "        return [",
      "            '$3' => '$4',",
      "        ];",
      "    });",
      "}",
      ""
    ],
    "description": "Laravel factory state"
  },
  "Laravel Log Queries": {
    "prefix": "lq",
    "body": [
      "ld()->logQueries();"
    ],
    "description": "Log all Laravel queries"
  },
  "PHP Protected Method": {
    "prefix": "pmet",
    "body": [
      "protected function $1($2): $3",
      "{",
      "    $4",
      "}",
      ""
    ],
    "description": "PHP protected method"
  },
  "PHP Public Method": {
    "prefix": "met",
    "body": [
      "public function $1($2): $3",
      "{",
      "    $4",
      "}",
      ""
    ],
    "description": "PHP public method"
  },
  "PHP Protected Member Variable": {
    "prefix": "pvar",
    "body": [
      "protected $1;"
    ],
    "description": "PHP private member variable"
  },
  "PHP Invoke Method": {
    "prefix": "invoke",
    "body": [
      "public function __invoke(Request \\$request)",
      "{",
      "    $1",
      "}"
    ],
    "description": "Creates a stub for an invoke method"
  },
  "Ray Show Queries": {
    "prefix": "rq",
    "body": [
      "ray()->showQueries();",
      ""
    ],
    "description": "Show all queries executed."
  }
}
