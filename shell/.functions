BGBLACK='\033[0;30m'
BGRED='\033[0;31m'
BGGREEN='\033[0;32m'
BGYELLOW='\033[0;33m'
BGBLUE='\033[0;34m'
BGPURPLE='\033[0;35m'
BGCYAN='\033[0;36m'
BGGRAY='\033[0;37m'

GRAY='\033[1;30m'
RED='\033[1;31m'
GREEN='\033[1;32m'
YELLOW='\033[1;33m'
BLUE='\033[1;34m'
PURPLE='\033[1;35m'
CYAN='\033[1;36m'
WHITE='\033[1;37m'

NC='\033[0m'

PRIVATE="${HOME}/.private"
DOTFILES="${HOME}/.dotfiles"

abort() {
    echo -e "${YELLOW}$@${NC}"; exit 1;
}

usage() {
    echo -e "${WHITE}$@${NC}"; exit 1;
}

info() {
    echo -e "${WHITE}$@${NC}"
}

warn() {
    echo -e "${YELLOW}$@${NC}"
}

die() {
    warn "$@"; exit 1;
}

escape() {
    echo "$1" | sed 's/\([\.\$\*]\)/\\\1/g'
}

has() {
    local item=$1; shift
    echo " $@ " | grep -q " $(escape $item) "
}


################################################################


composer_json() {
    [ -e "composer.json" ]
}

composer_installed() {
    [ -e /usr/local/bin/composer ]
}

homebrew_installed() {
    [ -e /usr/local/bin/brew ]
}

confirm_composer_installed() {
    if ! composer_installed; then
        abort "Composer has not been installed. Aborting execution."
    fi
}

confirm_homebrew_installed() {
    if ! homebrew_installed; then
        abort "Homebrew has not been installed. Aborting execution."
    fi
}

confirm_ag_is_installed() {
    if [ ! -e "/usr/local/bin/ag" ]; then
        abort "The Silver Searcher is not installed where expected - /usr/local/bin/ag\nhttps://github.com/ggreer/the_silver_searcher"
    fi
}

dotfiles_live_where_expected() {
    if [ ! -e "${DOTFILES}" ]; then
        abort "The dotfiles repo does not exist in the expected location."
    fi
}

dotfiles_confirm_stable() {
    if [ ! -e "${PRIVATE}" ]; then
      cd ${PRIVATE}
      if ! git diff-index --quiet HEAD --; then
          abort "The private dotfiles repo has pending changes."
      fi
    fi

    cd ${DOTFILES}
    if ! git diff-index --quiet HEAD --; then
        abort "The dotfiles repo has pending changes."
    fi
}

git_is_initialized() {
    git rev-parse --git-dir > /dev/null 2>&1;
}

git_local_branches() {
    git branch --no-color | sed 's/^[* ] //';
}

git_local_branch_exists() {
    has $1 $(git_local_branches)
}

git_current_branch() {
    git branch --no-color | grep '^\* ' | grep -v 'no branch' | sed 's/^* //g'
}

hubflow_has_master_configured() {
    local master=$(git config --get hubflow.branch.master)
    [ "$master" != "" ] && git_local_branch_exists "$master"
}

hubflow_has_develop_configured() {
    local develop=$(git config --get hubflow.branch.develop)
    [ "$develop" != "" ] && git_local_branch_exists "$develop"
}

hubflow_has_prefixes_configured() {
    git config --get hubflow.prefix.feature >/dev/null 2>&1     && \
    git config --get hubflow.prefix.release >/dev/null 2>&1     && \
    git config --get hubflow.prefix.hotfix >/dev/null 2>&1      && \
    git config --get hubflow.prefix.support >/dev/null 2>&1     && \
    git config --get hubflow.prefix.versiontag >/dev/null 2>&1
}

hubflow_is_initialized() {
    hubflow_has_master_configured                    && \
    hubflow_has_develop_configured                   && \
    [ "$(git config --get hubflow.branch.master)" !=    \
      "$(git config --get hubflow.branch.develop)" ] && \
    hubflow_has_prefixes_configured
}

laravel_application_root() {
    [ -e "artisan" ]
}

laravel_sail_is_running() {
    PSRESULT="$(docker-compose ps -q)"

    if docker-compose ps | grep 'Exit' &> /dev/null; then
        docker-compose down > /dev/null 2>&1

        return 1;
    fi

    [ -z "$PSRESULT" ] && return 1 || return 0
}

package_json_exists() {
    [ -e "package.json" ]
}
